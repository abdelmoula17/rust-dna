use rusty_dna::{
    contracts::DnaParser,
    dna_parser,
    providers::{
        ancestry::Ancestry,
        genes_for_good::GenesForGood,
        twenty_three_and_me::TwentyThreeAndMe,
    },
    structs::Snp,
};

struct AlwaysFailProvider;
impl DnaParser for AlwaysFailProvider {
    fn matches(&self, _lines: &str) -> Result<(), String> {
        Err("not a match".to_string())
    }

    fn parse(&self, _line: &str) -> Result<Snp, String> {
        panic!("parse should not be invoked when matches fails")
    }
}

#[test]
fn dna_parser_returns_error_when_provider_does_not_match() {
    let dna_data = "# synthetic content".to_string();
    let result = dna_parser(dna_data, AlwaysFailProvider);
    assert!(result.is_err());
}

#[test]
fn dna_parser_parses_lines_into_snp_map() {
    let dna_data = "# This data file is generated by 23andMe\nrsid\tchromosome\tposition\tgenotype\nrs1\t1\t12345\tAA\nrs2\tX\t54321\tC-\n";
    let result = dna_parser(dna_data.to_string(), TwentyThreeAndMe);

    let snps = result.expect("expected parsing to succeed");
    assert_eq!(snps.len(), 2);

    let rs1 = snps.get("rs1").expect("missing rs1 entry");
    assert_eq!(rs1.chromosome, "1");
    assert_eq!(rs1.position, 12345);
    assert_eq!(rs1.genotype, "AA");

    let rs2 = snps.get("rs2").expect("missing rs2 entry");
    assert_eq!(rs2.chromosome, "X");
    assert_eq!(rs2.position, 54321);
    assert_eq!(rs2.genotype, "C?");
}

#[test]
fn ancestry_parse_normalizes_chromosome_and_genotype() {
    let line = "rs123\t23\t12345\tA\t0";
    let snp = Ancestry.parse(line).expect("ancestry parsing failed");

    assert_eq!(snp.rsid, "rs123");
    assert_eq!(snp.chromosome, "X");
    assert_eq!(snp.position, 12345);
    assert_eq!(snp.genotype, "A ?");
}

#[test]
fn genes_for_good_parse_normalizes_no_calls() {
    let line = "rs999\tXY\t777\t--";
    let snp = GenesForGood.parse(line).expect("genes for good parsing failed");

    assert_eq!(snp.genotype, "??");
}

#[test]
fn twenty_three_and_me_parse_normalizes_no_calls_and_deletions() {
    let line = "rs555\tMT\t99\tD-";
    let snp = TwentyThreeAndMe
        .parse(line)
        .expect("23andMe parsing failed");

    assert_eq!(snp.genotype, "-?");
}
